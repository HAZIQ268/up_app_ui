import 'package:city_guide_app/App/Abbotabad.dart';
import 'package:city_guide_app/App/Islamabad.dart';
import 'package:city_guide_app/App/Karachi.dart';
import 'package:city_guide_app/App/explore.dart';
import 'package:city_guide_app/App/lahore.dart';
import 'package:city_guide_app/App/login.dart';
import 'package:city_guide_app/App/multan.dart';
import 'package:city_guide_app/App/profile.dart';
import 'package:city_guide_app/App/signup.dart';
import 'package:city_guide_app/database_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:convex_bottom_bar/convex_bottom_bar.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:shared_preferences/shared_preferences.dart';

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> with SingleTickerProviderStateMixin {
  String userName = "Guest";
  String userEmail = "guest@example.com";
  final DatabaseService _databaseService = DatabaseService();
  List<Map<String, dynamic>> cities = [];
  bool isLoading = true;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  bool _notificationsEnabled = true;
  final TextEditingController _searchController = TextEditingController();

  // Color Scheme
  final Color _primaryColor = const Color(0xFF4361EE);
  final Color _secondaryColor = const Color(0xFF3F37C9);
  final Color _accentColor = const Color(0xFF4CC9F0);
  final Color _backgroundColor = const Color(0xFFF8F9FA);

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    );
    _fadeAnimation = Tween<double>(begin: 0, end: 1).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );
    _animationController.forward();
    _loadUserData();
    _fetchCities();
  }

  @override
  void dispose() {
    _animationController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  Future<String> getProfileImage() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('profileImage') ??
        'https://cdn-icons-png.flaticon.com/512/3135/3135715.png';
  }

  _loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      userName = prefs.getString('userName') ?? 'Guest';
      userEmail = prefs.getString('userEmail') ?? 'guest@example.com';
    });

    User? user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      DocumentSnapshot userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();

      if (userDoc.exists) {
        Map<String, dynamic> data = userDoc.data() as Map<String, dynamic>;
        setState(() {
          userName = data['name'] ?? 'Guest';
          userEmail = data['email'] ?? 'guest@example.com';
        });

        await prefs.setString('userName', userName);
        await prefs.setString('userEmail', userEmail);
      }
    }
  }

  void _fetchCities() async {
    List<Map<String, dynamic>> fetchedCity = await _databaseService.getCity();
    List<String> popularCityNames = ['Multan', 'Karachi', 'Abbottabad', 'Islamabad', 'Lahore'];
    List<Map<String, dynamic>> popularCities = fetchedCity
        .where((city) => popularCityNames.contains(city['title']))
        .toList();

    popularCities.sort((a, b) {
      return popularCityNames.indexOf(a['title']).compareTo(popularCityNames.indexOf(b['title']));
    });

    setState(() {
      cities = popularCities;
      isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: _backgroundColor,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 1,
        title: const Text(
          'City Explorer',
          style: TextStyle(
            color: Colors.black,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        iconTheme: const IconThemeData(color: Colors.black),
      ),
      drawer: _buildDrawer(context),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Hero Banner with Search
            _buildHeroBanner(),
            
            // Categories Section
            _buildCategoriesSection(),
            
            // Popular Cities Section
            _buildPopularCitiesSection(),
            
            const SizedBox(height: 30),
          ],
        ),
      ),
      bottomNavigationBar: _buildConvexBottomBar(),
    );
  }

  Widget _buildHeroBanner() {
    return Container(
      height: 250,
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [_primaryColor, _secondaryColor],
        ),
        boxShadow: [
          BoxShadow(
            color: _primaryColor.withOpacity(0.3),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Stack(
        children: [
          Positioned(
            right: 20,
            bottom: 20,
            child: Opacity(
              opacity: 0.2,
              child: Icon(Icons.location_city, size: 120, color: Colors.white),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Discover Amazing Places',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 10),
                Text(
                  'Explore the best locations in your city',
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.9),
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 20),
                Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(30),
                  ),
                  child: TextField(
                    controller: _searchController,
                    decoration: InputDecoration(
                      hintText: 'Search places...',
                      prefixIcon: Icon(Icons.search, color: _primaryColor),
                      border: InputBorder.none,
                      contentPadding: const EdgeInsets.symmetric(vertical: 15, horizontal: 20),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoriesSection() {
    final List<Map<String, dynamic>> categories = [
      {
        'name': 'Attractions', 
        'icon': Icons.landscape, 
        'color': _accentColor,
        'screen': explore()
      },
      {
        'name': 'Restaurants', 
        'icon': Icons.restaurant, 
        'color': Colors.orange,
        'screen': explore()
      },
      {
        'name': 'Hotels', 
        'icon': Icons.hotel, 
        'color': Colors.pink,
        'screen': explore()
      },
      {
        'name': 'Events', 
        'icon': Icons.event, 
        'color': Colors.green,
        'screen': explore()
      },
    ];

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Categories',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          GridView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 4,
              crossAxisSpacing: 10,
              mainAxisSpacing: 10,
              childAspectRatio: 0.9,
            ),
            itemCount: categories.length,
            itemBuilder: (context, index) {
              return InkWell(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => categories[index]['screen']),
                  );
                },
                child: Column(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(15),
                      decoration: BoxDecoration(
                        color: categories[index]['color'].withOpacity(0.1),
                        shape: BoxShape.circle,
                        border: Border.all(
                          color: categories[index]['color'].withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      child: Icon(
                        categories[index]['icon'],
                        color: categories[index]['color'],
                        size: 24,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      categories[index]['name'],
                      style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ).animate().fadeIn(delay: (100 * index).ms),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildPopularCitiesSection() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Popular Cities',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              TextButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const explore()),
                  );
                },
                child: Text(
                  "See All",
                  style: TextStyle(
                    color: _primaryColor,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          isLoading
              ? const Center(child: CircularProgressIndicator())
              : SizedBox(
                  height: 180,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: cities.length,
                    itemBuilder: (context, index) {
                      return InkWell(
                        onTap: () {
                          _navigateToCity(cities[index]['title']);
                        },
                        child: Container(
                          width: 150,
                          margin: const EdgeInsets.only(right: 16),
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(15),
                            color: Colors.white,
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.1),
                                blurRadius: 6,
                                spreadRadius: 1,
                              ),
                            ],
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ClipRRect(
                                borderRadius: const BorderRadius.vertical(
                                    top: Radius.circular(15)),
                                child: Image.network(
                                  cities[index]['image_url'] ?? '',
                                  height: 100,
                                  width: double.infinity,
                                  fit: BoxFit.cover,
                                  loadingBuilder: (BuildContext context, Widget child,
                                      ImageChunkEvent? loadingProgress) {
                                    if (loadingProgress == null) return child;
                                    return Center(
                                      child: CircularProgressIndicator(
                                        value: loadingProgress.expectedTotalBytes != null
                                            ? loadingProgress.cumulativeBytesLoaded /
                                                loadingProgress.expectedTotalBytes!
                                            : null,
                                      ),
                                    );
                                  },
                                  errorBuilder: (context, error, stackTrace) => Container(
                                    height: 100,
                                    color: Colors.grey[200],
                                    child: const Icon(Icons.image, color: Colors.grey),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(12),
                                child: Text(
                                  cities[index]['title'] ?? '',
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ).animate().fadeIn(delay: (100 * index).ms),
                      );
                    },
                  ),
                ),
        ],
      ),
    );
  }

  void _navigateToCity(String cityName) {
    switch (cityName) {
      case 'Karachi':
        Navigator.push(context, MaterialPageRoute(builder: (context) => KarachiPage()));
        break;
      case 'Lahore':
        Navigator.push(context, MaterialPageRoute(builder: (context) => LahorePage()));
        break;
      case 'Multan':
        Navigator.push(context, MaterialPageRoute(builder: (context) => Multan()));
        break;
      case 'Islamabad':
        Navigator.push(context, MaterialPageRoute(builder: (context) => IslamabadPage()));
        break;
      case 'Abbottabad':
        Navigator.push(context, MaterialPageRoute(builder: (context) => Abbotabad()));
        break;
      default:
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => CategoryPage(category: cityName),
          ),
        );
    }
  }

  Widget _buildDrawer(BuildContext context) {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          FutureBuilder<String>(
            future: getProfileImage(),
            builder: (context, snapshot) {
              String profileImageUrl = snapshot.data ??
                  'https://cdn-icons-png.flaticon.com/512/3135/3135715.png';
              return UserAccountsDrawerHeader(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [_primaryColor, _secondaryColor],
                  ),
                ),
                accountName: Text(
                  userName,
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
                accountEmail: Text(userEmail),
                currentAccountPicture: CircleAvatar(
                  backgroundColor: Colors.white,
                  backgroundImage: NetworkImage(profileImageUrl),
                ),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.home, color: _primaryColor),
            title: const Text('Home'),
            onTap: () {
              Navigator.pop(context);
            },
          ),
          ListTile(
            leading: Icon(Icons.explore, color: _primaryColor),
            title: const Text('Explore'),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const explore()),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.person, color: _primaryColor),
            title: const Text('Profile'),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const Profile()),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.settings, color: _primaryColor),
            title: const Text('Settings'),
            onTap: () {},
          ),
          const Divider(),
          if (userEmail == "guest@example.com") ...[
            ListTile(
              leading: Icon(Icons.login, color: _primaryColor),
              title: const Text('Login'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => Login()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.person_add, color: _primaryColor),
              title: const Text('Sign Up'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const Signup()),
                );
              },
            ),
          ] else ...[
            ListTile(
              leading: Icon(Icons.logout, color: _primaryColor),
              title: const Text('Logout'),
              onTap: () async {
                SharedPreferences prefs = await SharedPreferences.getInstance();
                await prefs.remove('userName');
                await prefs.remove('userEmail');
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (context) => Login()),
                );
              },
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildConvexBottomBar() {
    return ConvexAppBar(
      style: TabStyle.fixedCircle,
      items: [
        TabItem(icon: Icons.home, title: 'Home'),
        TabItem(icon: Icons.explore, title: 'Explore'),
        TabItem(icon: Icons.person, title: 'Profile'),
      ],
      initialActiveIndex: 0,
      backgroundColor: Colors.white,
      color: Colors.grey,
      activeColor: _primaryColor,
      curveSize: 100,
      height: 55,
      onTap: (int index) {
        if (index == 0) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const Home()),
          );
        } else if (index == 1) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const explore()),
          );
        } else if (index == 2) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const Profile()),
          );
        }
      },
    );
  }
}

class CategoryPage extends StatelessWidget {
  final String category;

  const CategoryPage({Key? key, required this.category}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(category),
      ),
      body: Center(
        child: Text(
          'Welcome to $category page!',
          style: const TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}